import SmaleSpace.Bracket

open scoped Uniformity Topology
open Function Set Filter Metric

namespace SmaleSpace

variable (X : Type*) [MetricSpace X] {U V : Set (X √ó X)} {a b c o s u x y z : X} {Œµ : ‚Ñù}

local notation3 "Œ¥‚ÇÄ" => HasRuelleBracket.deltaZero X
local notation3 "Œ¥‚ÇÅ" => deltaOne X

/-- Class registering that a space is endowed with a hyperbolic map, compatible with a given
Ruelle bracket. -/
class HasRuelleBracketWithMap extends HasRuelleBracket X where
  /-- The hyperbolic map. Use as `T` through notation. -/
  mapT : X ‚âÉ X
  unifCont_T : UniformContinuous mapT
  unifCont_Tsymm : UniformContinuous mapT.symm
  /-- The contraction parameter -/
  lambda : ‚Ñù
  lambda_pos : 0 < lambda
  lambda_lt_one : lambda < 1
  bracket_image {x y : X} (h : dist x y ‚â§ Œ¥‚ÇÄ) (h' : dist (mapT x) (mapT y) ‚â§ Œ¥‚ÇÄ) :
    ‚ÅÖmapT x, mapT y‚ÅÜ = mapT ‚ÅÖx, y‚ÅÜ
  expansion {x y : X} (hxy : y ‚àà locUnstable Œ¥‚ÇÄ x) :
    dist (mapT.symm x) (mapT.symm y) ‚â§ lambda * dist x y
  contraction {x y : X} (hxy : y ‚àà locStable Œ¥‚ÇÄ x) :
    dist (mapT x) (mapT y) ‚â§ lambda * dist x y

local notation3 "T.symm" => Equiv.symm (HasRuelleBracketWithMap.mapT (X := X))
local notation3 "T" => HasRuelleBracketWithMap.mapT (X := X)
local notation3 "Œª" => HasRuelleBracketWithMap.lambda (X := X)

export HasRuelleBracketWithMap (lambda_pos lambda_lt_one bracket_image expansion contraction)

lemma bracket_image_symm [h : HasRuelleBracketWithMap X] (h : dist x y ‚â§ Œ¥‚ÇÄ)
    (h' : dist (T.symm x) (T.symm y) ‚â§ Œ¥‚ÇÄ) :
    ‚ÅÖT.symm x, T.symm y‚ÅÜ = T.symm ‚ÅÖx, y‚ÅÜ := by
  rw [‚Üê Equiv.apply_eq_iff_eq_symm_apply]
  simpa using (bracket_image h' (by simpa using h)).symm

/-- If `T` is a hyperbolic map on a space `X`, then `T‚Åª¬π` is also hyperbolic (with respect to the
reversed bracket). We register this as a typeclass on the type synonym `invDyn X`. -/
instance [h : HasRuelleBracketWithMap X] : HasRuelleBracketWithMap (invDyn X) where
  mapT := T.symm
  unifCont_T := h.unifCont_Tsymm
  unifCont_Tsymm := h.unifCont_T
  lambda := h.lambda
  lambda_pos := h.lambda_pos
  lambda_lt_one := h.lambda_lt_one
  bracket_image {x y} h‚ÇÅ h‚ÇÇ := by rw [dist_comm] at h‚ÇÅ h‚ÇÇ; exact bracket_image_symm (X := X) h‚ÇÅ h‚ÇÇ
  expansion hxy := h.contraction hxy
  contraction hxy := h.expansion hxy

class HasReduceScaleWithMap [HasRuelleBracketWithMap X] extends HasReduceScale X where
  dist_image_le {Œµ : ‚Ñù} {x y : X} (h : dist x y ‚â§ reduceScale Œµ) : dist (T x) (T y) ‚â§ Œµ
  dist_image_symm_le {Œµ : ‚Ñù} {x y : X} (h : dist x y ‚â§ reduceScale Œµ) :
    dist (T.symm x) (T.symm y) ‚â§ Œµ

export HasReduceScaleWithMap (dist_image_le dist_image_symm_le)

instance [HasRuelleBracketWithMap X] [HasReduceScaleWithMap X] :
    HasReduceScaleWithMap (invDyn X) where
  dist_image_le := dist_image_symm_le (X := X)
  dist_image_symm_le := dist_image_le (X := X)

variable {X}
variable [HasRuelleBracketWithMap X]

lemma image_mem_locStable (hŒµ : Œµ ‚â§ Œ¥‚ÇÄ) (h : x ‚àà locStable Œµ o) :
    T x ‚àà locStable (Œª * Œµ) (T o) := by
  simp only [locStable, mem_setOf_eq]
  have A : dist (T o) (T x) ‚â§ Œª * Œµ := by
    apply (contraction (locStable_mono hŒµ h)).trans
    gcongr
    ¬∑ apply lambda_pos.le
    ¬∑ exact h.1
  refine ‚ü®A, ?_‚ü©
  rw [bracket_image]
  ¬∑ congr 1
    exact h.2
  ¬∑ rw [dist_comm]
    exact (locStable_mono hŒµ h).1
  ¬∑ have : 0 ‚â§ Œµ := dist_nonneg.trans h.1
    rw [dist_comm]
    apply A.trans (le_trans _ hŒµ)
    have := lambda_lt_one (X := X)
    nlinarith

lemma image_iter_mem_locStable (hŒµ : Œµ ‚â§ Œ¥‚ÇÄ) (h : x ‚àà locStable Œµ o) (n : ‚Ñï) :
    T^[n] x ‚àà locStable (Œª ^ n * Œµ) (T^[n] o) := by
  induction n with
  | zero =>
    simpa using h
  | succ n ih =>
    rw [iterate_succ_apply', iterate_succ_apply', show Œª ^ (n + 1) * Œµ = Œª * (Œª ^ n * Œµ) by ring]
    apply image_mem_locStable _ ih
    have : Œª ^ n ‚â§ 1 := pow_le_one‚ÇÄ lambda_pos.le lambda_lt_one.le
    have : 0 ‚â§ Œµ := dist_nonneg.trans h.1
    exact le_trans (by nlinarith) hŒµ

lemma image_mem_locUnstable (hŒµ : Œµ ‚â§ Œ¥‚ÇÄ) (h : x ‚àà locUnstable Œµ o) :
    T.symm x ‚àà locUnstable (Œª * Œµ) (T.symm o) :=
  image_mem_locStable (X := invDyn X) (by exact hŒµ) h

lemma image_iter_mem_locUnstable (hŒµ : Œµ ‚â§ Œ¥‚ÇÄ) (h : x ‚àà locUnstable Œµ o) (n : ‚Ñï) :
    T.symm^[n] x ‚àà locUnstable (Œª ^ n * Œµ) (T.symm^[n] o) :=
  image_iter_mem_locStable (X := invDyn X) (by exact hŒµ) h n

lemma locStable_eq_dist_iter_le [HasReduceScale X] (hŒµ : Œµ ‚â§ Œ¥‚ÇÅ) :
    locStable Œµ o = {x | ‚àÄ n, dist (T^[n] o) (T^[n] x) ‚â§ Œµ} := by
  have h'Œµ : Œµ ‚â§ Œ¥‚ÇÄ := hŒµ.trans deltaOne_le_deltaZero
  apply Subset.antisymm
  ¬∑ intro x hx n
    apply (image_iter_mem_locStable h'Œµ hx n).1.trans
    have : Œª ^ n ‚â§ 1 := pow_le_one‚ÇÄ lambda_pos.le lambda_lt_one.le
    have : 0 ‚â§ Œµ := dist_nonneg.trans hx.1
    nlinarith
  ¬∑ intro x hx
    rw [locStable_eq h'Œµ]
    refine ‚ü®by simpa using hx 0, ?_‚ü©
    let y n := ‚ÅÖT^[n] o, T^[n] x‚ÅÜ
    have A n : T (y n) = y (n + 1) := by
      simp only [y, iterate_succ_apply']
      rw [bracket_image]
      ¬∑ apply (hx n).trans h'Œµ
      ¬∑ simp only [‚Üê iterate_succ_apply']
        apply (hx (n + 1)).trans h'Œµ
    have A' n : y n = T^[n] (y 0) := by
      induction n with
      | zero => simp
      | succ n ih => simp only [‚Üê A, ih, iterate_succ_apply']
    have B n : y n ‚àà locUnstable Œ¥‚ÇÄ (T^[n] o) := by
      apply bracket_mem_locUnstable
      exact (hx n).trans hŒµ
    have C n : y 0 ‚àà locUnstable (Œª ^ n * Œ¥‚ÇÄ) o := by
      have L : Function.LeftInverse T.symm^[n] T^[n] := (Equiv.leftInverse_symm T).iterate _
      convert image_iter_mem_locUnstable le_rfl (B n) n
      ¬∑ rw [L o]
      ¬∑ rw [A' n, L (y 0)]
    have : dist o (y 0) = 0 := by
      apply le_antisymm ?_ dist_nonneg
      have : Tendsto (fun n ‚Ü¶ Œª ^ n * Œ¥‚ÇÄ) atTop (ùìù (0 * Œ¥‚ÇÄ)) :=
        (tendsto_pow_atTop_nhds_zero_of_lt_one lambda_pos.le lambda_lt_one).mul_const _
      rw [zero_mul] at this
      exact ge_of_tendsto' this (fun n ‚Ü¶ (C n).1)
    simp only [dist_eq_zero] at this
    exact this.symm

lemma locUnstable_eq_dist_iter_le [HasReduceScale X] (hŒµ : Œµ ‚â§ Œ¥‚ÇÅ) :
    locUnstable Œµ o = {x | ‚àÄ n, dist (T.symm^[n] o) (T.symm^[n] x) ‚â§ Œµ} :=
  locStable_eq_dist_iter_le (X := invDyn X) hŒµ

lemma exists_dist_image_iter_le_of_pseudoOrbit
    {Y : Type*} [MetricSpace Y] {f : Y ‚Üí Y} (hf : UniformContinuous f)
    {Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥) (n : ‚Ñï) :
    ‚àÉ Œµ > 0, ‚àÄ (u : ‚Ñï ‚Üí Y), (‚àÄ n, dist (f (u n)) (u (n + 1)) ‚â§ Œµ) ‚Üí
      ‚àÄ i ‚â§ n, dist (f ^[i] (u 0)) (u i) ‚â§ Œ¥ := by
  induction n generalizing Œ¥ with
  | zero =>
    refine ‚ü®Œ¥, hŒ¥, fun u hu ‚Ü¶ by simp [hŒ¥.le]‚ü©
  | succ n ih =>
    rcases Metric.uniformContinuous_iff.1 hf (Œ¥ / 2) (by linarith) with ‚ü®Œ¥', Œ¥'pos, h'‚ü©
    rcases ih (show 0 < min Œ¥ (Œ¥' / 2) by positivity) with ‚ü®Œµ, Œµpos, hŒµ‚ü©
    refine ‚ü®min Œµ (Œ¥ / 2), by positivity, fun u hu i hi ‚Ü¶ ?_‚ü©
    rcases Nat.le_succ_iff.1 hi with h'i | rfl
    ¬∑ apply (hŒµ u (fun m ‚Ü¶ ?_) i h'i).trans (min_le_left _ _)
      exact (hu m).trans (min_le_left _ _)
    calc
    dist (f^[n + 1] (u 0)) (u (n + 1))
    _ ‚â§ dist (f (f^[n] (u 0))) (f (u n)) + dist (f (u n)) (u (n + 1)) := by
      rw [iterate_succ_apply']
      apply dist_triangle
    _ ‚â§ Œ¥ / 2 + Œ¥ / 2 := by
      gcongr
      ¬∑ apply (h' _).le
        suffices dist (f^[n] (u 0)) (u n) ‚â§ Œ¥' / 2 by linarith
        exact (hŒµ u (fun m ‚Ü¶ (hu m).trans (min_le_left _ _)) n le_rfl).trans
          (min_le_right _ _)
      ¬∑ exact (hu n).trans (min_le_right _ _)
    _ = Œ¥ := by linarith

variable [HasReduceScale X]

lemma future_shadowing_aux (Œµ Œ¥ : ‚Ñù) (hŒµ : 0 < Œµ) (hŒ¥ : 0 < Œ¥) (h'Œ¥ : Œ¥ ‚â§ Œ¥‚ÇÄ) (x : ‚Ñï ‚Üí X)
    (hx : ‚àÄ n, dist (T (x n)) (x (n + 1)) ‚â§ Œµ) (M : ‚Ñï) (hM : 2 * Œª ^ M * Œ¥ ‚â§ reduceScale X Œ¥)
    (hŒµ : ‚àÄ (u : ‚Ñï ‚Üí X), (‚àÄ n, dist (T (u n)) (u (n + 1)) ‚â§ Œµ) ‚Üí
      ‚àÄ i ‚â§ M, dist (T^[i] (u 0)) (u i) ‚â§ reduceScale X Œ¥ / 2) :
    ‚àÉ p ‚àà locUnstable Œ¥ (x 0), ‚àÄ n, dist (x n) (T ^[n] p) < Œµ := by
  have := lambda_pos (X := X)
  have : Œª ^ M ‚â§ 2‚Åª¬π := by
    have W := hM.trans reduceScale_le_half_self
    field_simp at W
    linarith
  -- define inductively a sequence by `y‚ÇÄ = x‚ÇÄ`, and `y_{n+1}` the intersection of `W^u (T^M y‚Çô)`
  -- and `W^s (x_{M * (n+1)})`.
  let y := Nat.rec (motive := fun n ‚Ü¶ X) (x 0) (fun n q ‚Ü¶ ‚ÅÖT^[M] q, x (M * (n + 1))‚ÅÜ)
  have A_aux n (hn : y n ‚àà locStable Œ¥ (x (M * n))) :
      dist (x (M * (n + 1))) ((‚áëT)^[M] (y n)) ‚â§ reduceScale X Œ¥ := by
    apply (dist_triangle_left _ _ (T^[M] (x (M * n)))).trans
    have A : dist (T^[M] (x (M * n))) (x (M * (n + 1))) ‚â§ reduceScale X Œ¥ / 2 :=
      hŒµ (fun k ‚Ü¶ x (M * n + k)) (fun k ‚Ü¶ hx (M * n + k)) M le_rfl
    have B : dist (T^[M] (x (M * n))) (T^[M] (y n)) ‚â§ Œª ^ M * Œ¥ :=
      (image_iter_mem_locStable h'Œ¥ hn M).1
    linarith
  have B n : y n ‚àà locStable Œ¥ (x (M * n)) := by
    induction n with
    | zero => simp [y, hŒ¥.le, locStable]
    | succ n ih =>
      rw [show y (n + 1) = ‚ÅÖT^[M] (y n), x (M * (n + 1))‚ÅÜ by rfl]
      exact bracket_mem_locStable (A_aux n ih)
  have A n : dist (x (M * (n + 1))) ((‚áëT)^[M] (y n)) ‚â§ reduceScale X Œ¥ :=
    A_aux n (B n)
  have C n : y (n + 1) ‚àà locUnstable Œ¥ (T^[M] (y n)) := by
    rw [show y (n + 1) = ‚ÅÖT^[M] (y n), x (M * (n + 1))‚ÅÜ by rfl]
    apply bracket_mem_locUnstable
    rw [dist_comm]
    exact A n
  let z n := T.symm^[M * n] (y n)
  have Z n : z (n + 1) ‚àà locUnstable (Œª ^ (M * (n + 1)) * Œ¥) (z n) := by
    convert image_iter_mem_locUnstable h'Œ¥ (C n) (n := M * (n + 1)) using 2
    have L : Function.LeftInverse T.symm^[M] T^[M] := (Equiv.leftInverse_symm T).iterate _
    rw [mul_add, iterate_add_apply, mul_one, L (y n)]
  have Z' n : z (n + 1) ‚àà locUnstable (2‚Åª¬π ^ (n + 1) * Œ¥) (z n) := by
    apply locUnstable_mono _ (Z n)
    rw [pow_mul]
    gcongr
  sorry

lemma future_shadowing (Œµ : ‚Ñù) (hŒµ : 0 < Œµ) (x : ‚Ñï ‚Üí X)
    (hx : ‚àÄ n, dist (x (n + 1)) (T (x n)) ‚â§ Œµ) :
    ‚àÉ p ‚àà locUnstable Œµ (x 0), ‚àÄ n, dist (x n) (T ^[n] p) < Œµ := by
  sorry

end SmaleSpace
