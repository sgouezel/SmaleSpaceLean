import SmaleSpace.Bracket

open scoped Uniformity Topology
open Function Set Filter Metric

namespace SmaleSpace

variable (X : Type*) [MetricSpace X] {U V : Set (X √ó X)} {a b c o s u x y z : X} {Œµ : ‚Ñù} {n : ‚Ñï}

local notation3 "Œ¥‚ÇÄ" => HasRuelleBracket.deltaZero X
local notation3 "Œ¥‚ÇÅ" => deltaOne X

/-- Class registering that a space is endowed with a hyperbolic map, compatible with a given
Ruelle bracket. -/
class HasRuelleBracketWithMap extends HasRuelleBracket X where
  /-- The hyperbolic map. Use as `T` through notation. -/
  mapT : X ‚âÉ X
  unifCont_T : UniformContinuous mapT
  unifCont_Tsymm : UniformContinuous mapT.symm
  /-- The contraction parameter -/
  lambda : ‚Ñù
  lambda_pos : 0 < lambda
  lambda_lt_one : lambda < 1
  bracket_image {x y : X} (h : dist x y ‚â§ Œ¥‚ÇÄ) (h' : dist (mapT x) (mapT y) ‚â§ Œ¥‚ÇÄ) :
    ‚ÅÖmapT x, mapT y‚ÅÜ = mapT ‚ÅÖx, y‚ÅÜ
  expansion {x y : X} (hxy : y ‚àà locUnstable Œ¥‚ÇÄ x) :
    dist (mapT.symm x) (mapT.symm y) ‚â§ lambda * dist x y
  contraction {x y : X} (hxy : y ‚àà locStable Œ¥‚ÇÄ x) :
    dist (mapT x) (mapT y) ‚â§ lambda * dist x y

local notation3 "T.symm" => Equiv.symm (HasRuelleBracketWithMap.mapT (X := X))
local notation3 "T" => HasRuelleBracketWithMap.mapT (X := X)
local notation3 "Œª" => HasRuelleBracketWithMap.lambda (X := X)

export HasRuelleBracketWithMap (lambda_pos lambda_lt_one bracket_image expansion contraction
  unifCont_T unifCont_Tsymm)

lemma bracket_image_symm [h : HasRuelleBracketWithMap X] (h : dist x y ‚â§ Œ¥‚ÇÄ)
    (h' : dist (T.symm x) (T.symm y) ‚â§ Œ¥‚ÇÄ) :
    ‚ÅÖT.symm x, T.symm y‚ÅÜ = T.symm ‚ÅÖx, y‚ÅÜ := by
  rw [‚Üê Equiv.apply_eq_iff_eq_symm_apply]
  simpa using (bracket_image h' (by simpa using h)).symm

/-- If `T` is a hyperbolic map on a space `X`, then `T‚Åª¬π` is also hyperbolic (with respect to the
reversed bracket). We register this as a typeclass on the type synonym `invDyn X`. -/
instance [h : HasRuelleBracketWithMap X] : HasRuelleBracketWithMap (invDyn X) where
  mapT := T.symm
  unifCont_T := h.unifCont_Tsymm
  unifCont_Tsymm := h.unifCont_T
  lambda := h.lambda
  lambda_pos := h.lambda_pos
  lambda_lt_one := h.lambda_lt_one
  bracket_image {x y} h‚ÇÅ h‚ÇÇ := by rw [dist_comm] at h‚ÇÅ h‚ÇÇ; exact bracket_image_symm (X := X) h‚ÇÅ h‚ÇÇ
  expansion hxy := h.contraction hxy
  contraction hxy := h.expansion hxy

variable {X}
variable [HasRuelleBracketWithMap X]

@[fun_prop]
lemma continuous_T : Continuous T := unifCont_T.continuous

@[fun_prop]
lemma continuous_Tsymm : Continuous T.symm := unifCont_Tsymm.continuous

lemma image_mem_locStable (hŒµ : Œµ ‚â§ Œ¥‚ÇÄ) (h : x ‚àà locStable Œµ o) :
    T x ‚àà locStable (Œª * Œµ) (T o) := by
  simp only [locStable, mem_setOf_eq]
  have A : dist (T o) (T x) ‚â§ Œª * Œµ := by
    apply (contraction (locStable_mono hŒµ h)).trans
    gcongr
    ¬∑ apply lambda_pos.le
    ¬∑ exact h.1
  refine ‚ü®A, ?_‚ü©
  rw [bracket_image]
  ¬∑ congr 1
    exact h.2
  ¬∑ rw [dist_comm]
    exact (locStable_mono hŒµ h).1
  ¬∑ have : 0 ‚â§ Œµ := dist_nonneg.trans h.1
    rw [dist_comm]
    apply A.trans (le_trans _ hŒµ)
    have := lambda_lt_one (X := X)
    nlinarith

lemma image_mem_locUnstable (hŒµ : Œµ ‚â§ Œ¥‚ÇÄ) (h : x ‚àà locUnstable Œµ o) :
    T.symm x ‚àà locUnstable (Œª * Œµ) (T.symm o) :=
  image_mem_locStable (X := invDyn X) (by exact hŒµ) h

lemma image_iter_mem_locStable (hŒµ : Œµ ‚â§ Œ¥‚ÇÄ) (h : x ‚àà locStable Œµ o) (n : ‚Ñï) :
    T^[n] x ‚àà locStable (Œª ^ n * Œµ) (T^[n] o) := by
  induction n with
  | zero =>
    simpa using h
  | succ n ih =>
    rw [iterate_succ_apply', iterate_succ_apply', show Œª ^ (n + 1) * Œµ = Œª * (Œª ^ n * Œµ) by ring]
    apply image_mem_locStable _ ih
    have : Œª ^ n ‚â§ 1 := pow_le_one‚ÇÄ lambda_pos.le lambda_lt_one.le
    have : 0 ‚â§ Œµ := dist_nonneg.trans h.1
    exact le_trans (by nlinarith) hŒµ

lemma image_iter_mem_locUnstable (hŒµ : Œµ ‚â§ Œ¥‚ÇÄ) (h : x ‚àà locUnstable Œµ o) (n : ‚Ñï) :
    T.symm^[n] x ‚àà locUnstable (Œª ^ n * Œµ) (T.symm^[n] o) :=
  image_iter_mem_locStable (X := invDyn X) (by exact hŒµ) h n

variable [HasReduceScale X]

/-- If two points follow each other during time `n`, then the difference between their unstable
components is exponentially small. -/
lemma mem_locUnstable_lambda_pow_of_forall_dist_le
    (hx : ‚àÄ i ‚â§ n, dist (T^[i] o) (T^[i] x) ‚â§ Œ¥‚ÇÅ) :
    ‚ÅÖo, x‚ÅÜ ‚àà locUnstable (Œª ^ n * Œ¥‚ÇÄ) o := by
  let y i := ‚ÅÖT^[i] o, T^[i] x‚ÅÜ
  have A i (hi : i < n) : T (y i) = y (i + 1) := by
    simp only [y, iterate_succ_apply']
    rw [bracket_image]
    ¬∑ apply (hx i hi.le).trans deltaOne_le_deltaZero
    ¬∑ simp only [‚Üê iterate_succ_apply']
      apply (hx (i + 1) (by omega)).trans deltaOne_le_deltaZero
  have A' i (hi : i ‚â§ n) : y i = T^[i] (y 0) := by
    induction i with
    | zero => simp
    | succ i ih => rw [‚Üê A _ (by omega), ih (by omega), iterate_succ_apply']
  have B : y n ‚àà locUnstable Œ¥‚ÇÄ (T^[n] o) := by
    apply bracket_mem_locUnstable
    exact hx n le_rfl
  have : y 0 ‚àà locUnstable (Œª ^ n * Œ¥‚ÇÄ) o := by
    have L : Function.LeftInverse T.symm^[n] T^[n] := (Equiv.leftInverse_symm T).iterate _
    convert image_iter_mem_locUnstable le_rfl B n
    ¬∑ rw [L o]
    ¬∑ rw [A' n le_rfl, L (y 0)]
  exact this

/-- If two points follow each other during time `n` in the past, then the difference between their
stable components is exponentially small. -/
lemma mem_locStable_lambda_pow_of_forall_dist_le
    (hx : ‚àÄ i ‚â§ n, dist (T.symm^[i] o) (T.symm^[i] x) ‚â§ Œ¥‚ÇÅ) :
    ‚ÅÖx, o‚ÅÜ ‚àà locStable (Œª ^ n * Œ¥‚ÇÄ) o :=
  mem_locUnstable_lambda_pow_of_forall_dist_le (X := invDyn X) hx

/-- The local stable manifold of a point `o` of size `Œµ` is exactly the set of points that
remain within distance `Œµ` of the orbit of `o` in the future. -/
lemma locStable_eq_dist_iter_le (hŒµ : Œµ ‚â§ Œ¥‚ÇÅ) :
    locStable Œµ o = {x | ‚àÄ n, dist (T^[n] o) (T^[n] x) ‚â§ Œµ} := by
  have h'Œµ : Œµ ‚â§ Œ¥‚ÇÄ := hŒµ.trans deltaOne_le_deltaZero
  apply Subset.antisymm
  ¬∑ intro x hx n
    apply (image_iter_mem_locStable h'Œµ hx n).1.trans
    have : Œª ^ n ‚â§ 1 := pow_le_one‚ÇÄ lambda_pos.le lambda_lt_one.le
    have : 0 ‚â§ Œµ := dist_nonneg.trans hx.1
    nlinarith
  ¬∑ intro x hx
    rw [locStable_eq (hŒµ.trans deltaOne_le_deltaZero)]
    refine ‚ü®hx 0, ?_‚ü©
    have C n : ‚ÅÖo, x‚ÅÜ ‚àà locUnstable (Œª ^ n * Œ¥‚ÇÄ) o := by
      apply mem_locUnstable_lambda_pow_of_forall_dist_le (fun i hi ‚Ü¶ (hx i).trans hŒµ)
    have : dist o ‚ÅÖo, x‚ÅÜ = 0 := by
      apply le_antisymm ?_ dist_nonneg
      have : Tendsto (fun n ‚Ü¶ Œª ^ n * Œ¥‚ÇÄ) atTop (ùìù (0 * Œ¥‚ÇÄ)) :=
        (tendsto_pow_atTop_nhds_zero_of_lt_one lambda_pos.le lambda_lt_one).mul_const _
      rw [zero_mul] at this
      exact ge_of_tendsto' this (fun n ‚Ü¶ (C n).1)
    simp only [dist_eq_zero] at this
    exact this.symm

/-- The local unstable manifold of a point `o` of size `Œµ` is exactly the set of points that
remain within distance `Œµ` of the orbit of `o` in the past. -/
lemma locUnstable_eq_dist_iter_le (hŒµ : Œµ ‚â§ Œ¥‚ÇÅ) :
    locUnstable Œµ o = {x | ‚àÄ n, dist (T.symm^[n] o) (T.symm^[n] x) ‚â§ Œµ} :=
  locStable_eq_dist_iter_le (X := invDyn X) hŒµ

/-- If two points follow each other during time `n`, both in the past and in the future, then they
are exponentially close. -/
lemma expansive_finite_time (h : ‚àÄ i ‚â§ n, dist (T^[i] x) (T^[i] y) ‚â§ Œ¥‚ÇÅ)
    (h' : ‚àÄ i ‚â§ n, dist (T.symm^[i] x) (T.symm^[i] y) ‚â§ Œ¥‚ÇÅ) :
    dist x y ‚â§ 2 * Œª^n * Œ¥‚ÇÄ := by
  have : dist x ‚ÅÖy, x‚ÅÜ ‚â§ Œª ^ n * Œ¥‚ÇÄ := (mem_locStable_lambda_pow_of_forall_dist_le h').1
  have : dist y ‚ÅÖy, x‚ÅÜ ‚â§ Œª ^ n * Œ¥‚ÇÄ := by
    have : ‚àÄ i ‚â§ n, dist (T^[i] y) (T^[i] x) ‚â§ Œ¥‚ÇÅ := by
      intro i hi
      rw [dist_comm]
      exact h i hi
    exact (mem_locUnstable_lambda_pow_of_forall_dist_le this).1
  linarith [dist_triangle_right x y ‚ÅÖy, x‚ÅÜ]

/-- If two points follow each other during time `n`, both in the past and in the future, then they
are exponentially close. -/
lemma expansive_finite_time' (h : ‚àÄ (i : ‚Ñ§), i.natAbs ‚â§ n ‚Üí dist ((T ^ i) x) ((T ^ i) y) ‚â§ Œ¥‚ÇÅ) :
    dist x y ‚â§ 2 * Œª^n * Œ¥‚ÇÄ := by
  apply expansive_finite_time
  ¬∑ intro i hi
    exact h (i : ‚Ñ§) (by omega)
  ¬∑ intro i hi
    have : T.symm^[i] = ‚áë(T ^ (-i : ‚Ñ§)) := by
      simp only [Equiv.Perm.iterate_eq_pow, zpow_neg, zpow_natCast, DFunLike.coe_fn_eq]
      rfl
    convert h (-i : ‚Ñ§) (by omega)

/-- If two points follow each other, both in the past and in the future, then they coincide. -/
lemma expansive (h : ‚àÄ i, dist (T^[i] x) (T^[i] y) ‚â§ Œ¥‚ÇÅ)
    (h' : ‚àÄ i, dist (T.symm^[i] x) (T.symm^[i] y) ‚â§ Œ¥‚ÇÅ) : x = y := by
  apply eq_of_dist_eq_zero
  apply le_antisymm ?_ dist_nonneg
  have : Tendsto (fun n ‚Ü¶ 2 * Œª ^ n * Œ¥‚ÇÄ) atTop (ùìù (2 * 0 * Œ¥‚ÇÄ)) :=
    ((tendsto_pow_atTop_nhds_zero_of_lt_one lambda_pos.le lambda_lt_one).const_mul _).mul_const _
  rw [mul_zero, zero_mul] at this
  apply ge_of_tendsto' this (fun n ‚Ü¶ ?_)
  apply expansive_finite_time (fun i hi ‚Ü¶ h i) (fun i hi ‚Ü¶ h' i)

/-- If two points follow each other, both in the past and in the future, then they coincide. -/
lemma expansive' (h : ‚àÄ (i : ‚Ñ§), dist ((T ^ i) x) ((T ^ i) y) ‚â§ Œ¥‚ÇÅ) : x = y := by
  apply expansive (fun i ‚Ü¶ h i) (fun i ‚Ü¶ ?_)
  have : T.symm^[i] = ‚áë(T ^ (-i : ‚Ñ§)) := by
    simp only [Equiv.Perm.iterate_eq_pow, zpow_neg, zpow_natCast, DFunLike.coe_fn_eq]
    rfl
  convert h (-i : ‚Ñ§)






/-- Given a positive parameter `Œ¥`, an integer `n` and a uniformly continuous map `f`, one may find
`Œµ > 0` such that any `Œµ`-pseudo-orbit does not deviate from a genuine orbit by more than `Œ¥`
during the first `n` iterates. -/
lemma exists_dist_image_iter_le_of_pseudoOrbit
    {Y : Type*} [MetricSpace Y] {f : Y ‚Üí Y} (hf : UniformContinuous f)
    {Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥) (n : ‚Ñï) :
    ‚àÉ Œµ > 0, ‚àÄ (u : ‚Ñï ‚Üí Y), (‚àÄ n, dist (f (u n)) (u (n + 1)) ‚â§ Œµ) ‚Üí
      ‚àÄ i ‚â§ n, dist (f ^[i] (u 0)) (u i) ‚â§ Œ¥ := by
  /- This is a straightforward consequence of uniform continuity (through an induction). -/
  induction n generalizing Œ¥ with
  | zero =>
    refine ‚ü®Œ¥, hŒ¥, fun u hu ‚Ü¶ by simp [hŒ¥.le]‚ü©
  | succ n ih =>
    rcases Metric.uniformContinuous_iff.1 hf (Œ¥ / 2) (by linarith) with ‚ü®Œ¥', Œ¥'pos, h'‚ü©
    rcases ih (show 0 < min Œ¥ (Œ¥' / 2) by positivity) with ‚ü®Œµ, Œµpos, hŒµ‚ü©
    refine ‚ü®min Œµ (Œ¥ / 2), by positivity, fun u hu i hi ‚Ü¶ ?_‚ü©
    rcases Nat.le_succ_iff.1 hi with h'i | rfl
    ¬∑ apply (hŒµ u (fun m ‚Ü¶ ?_) i h'i).trans (min_le_left _ _)
      exact (hu m).trans (min_le_left _ _)
    calc
    dist (f^[n + 1] (u 0)) (u (n + 1))
    _ ‚â§ dist (f (f^[n] (u 0))) (f (u n)) + dist (f (u n)) (u (n + 1)) := by
      rw [iterate_succ_apply']
      apply dist_triangle
    _ ‚â§ Œ¥ / 2 + Œ¥ / 2 := by
      gcongr
      ¬∑ apply (h' _).le
        suffices dist (f^[n] (u 0)) (u n) ‚â§ Œ¥' / 2 by linarith
        exact (hŒµ u (fun m ‚Ü¶ (hu m).trans (min_le_left _ _)) n le_rfl).trans
          (min_le_right _ _)
      ¬∑ exact (hu n).trans (min_le_right _ _)
    _ = Œ¥ := by linarith

variable [CompleteSpace X]

--TODO: upstream
attribute [fun_prop] Continuous.iterate

/-- Let `Œ¥ > 0`. Let `Œµ` be small enough compared to `Œ¥`. Then any `Œµ`-pseudo-orbit in the future
can be `4Œ¥`-shadowed by a genuine orbit, starting from the `Œ¥`-unstable manifold of the initial
point.

We give the conditions on `Œµ` in explicit form, to make it possible to check them uniformly
over families of maps. First, we fix `M` large enough so that `2 * Œª ^ M * Œ¥ ‚â§ reduceScale X Œ¥`.
Then, `Œµ` should be small enough that an `Œµ`-pseudo-orbit does not deviate from a genuine orbit
by more than `reduceScale X Œ¥ / 2` until time `M`.
-/
lemma future_shadowing_precise
    {Œµ Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥) (h''Œ¥ : Œ¥ ‚â§ Œ¥‚ÇÄ / 2) (x : ‚Ñï ‚Üí X)
    (hx : ‚àÄ n, dist (T (x n)) (x (n + 1)) ‚â§ Œµ) {M : ‚Ñï} (hM : 2 * Œª ^ M * Œ¥ ‚â§ reduceScale X Œ¥)
    (hŒµ : ‚àÄ (u : ‚Ñï ‚Üí X), (‚àÄ n, dist (T (u n)) (u (n + 1)) ‚â§ Œµ) ‚Üí
      ‚àÄ i ‚â§ M, dist (T^[i] (u 0)) (u i) ‚â§ reduceScale X Œ¥ / 2) :
    ‚àÉ p ‚àà locUnstable Œ¥ (x 0), ‚àÄ n, dist (x n) (T ^[n] p) ‚â§ 4 * Œ¥ := by
  -- Start by recording useful basic facts
  have : Nonempty X := ‚ü®x 0‚ü©
  have := lambda_pos (X := X)
  have lambdaM : Œª ^ M ‚â§ 2‚Åª¬π := by
    have W := hM.trans reduceScale_le_half_self
    field_simp at W
    linarith
  have : M ‚â† 0 := by
    intro h
    simp only [h, pow_zero] at lambdaM
    norm_num at lambdaM
  have h'Œ¥ : Œ¥ ‚â§ Œ¥‚ÇÄ := by linarith [deltaZero_pos (X := X)]
  have L n : Function.LeftInverse T.symm^[n] T^[n] := (Equiv.leftInverse_symm T).iterate _
  have L' n : Function.LeftInverse T^[n] T.symm^[n] := (Equiv.leftInverse_symm T.symm).iterate _
  /- define inductively a sequence by `y‚ÇÄ = x‚ÇÄ`, and `y_{n+1}` the intersection of `W^u (T^M y‚Çô)`
  and `W^s (x_{M * (n + 1)})`.
  We will prove in the course of the proof that the displacement along the unstable manifold made
  at step `n` when going from `T^M y‚Çô` to `y_{n+1}` is always by at most `Œ¥`. Pulling back `y‚Çô` by
  `T^{-n}` inside `W^u (x‚ÇÄ)`, one gets a sequence with jumps bounded by `Œ¥ 2^{-n}`, therefore Cauchy
  and converging. By design, its limit will be the desired point.
  -/
  let y := Nat.rec (motive := fun n ‚Ü¶ X) (x 0) (fun n q ‚Ü¶ ‚ÅÖT^[M] q, x (M * (n + 1))‚ÅÜ)
  /- First, we will check inductively that `y‚Çô` is on the `Œ¥`-stable manifold of `x_{M * n}`.
  It follows that its image under `T^M` is even closer to `x_{M * (n + 1)}`, therefore taking the
  bracket one remains within `Œ¥`, completing the induction. -/
  have A_aux n (hn : y n ‚àà locStable Œ¥ (x (M * n))) :
      dist (x (M * (n + 1))) (T^[M] (y n)) ‚â§ reduceScale X Œ¥ := by
    apply (dist_triangle_left _ _ (T^[M] (x (M * n)))).trans
    have A : dist (T^[M] (x (M * n))) (x (M * (n + 1))) ‚â§ reduceScale X Œ¥ / 2 :=
      hŒµ (fun k ‚Ü¶ x (M * n + k)) (fun k ‚Ü¶ hx (M * n + k)) M le_rfl
    have B : dist (T^[M] (x (M * n))) (T^[M] (y n)) ‚â§ Œª ^ M * Œ¥ :=
      (image_iter_mem_locStable h'Œ¥ hn M).1
    linarith
  have B n : y n ‚àà locStable Œ¥ (x (M * n)) := by
    induction n with
    | zero => simp [y, hŒ¥.le, locStable]
    | succ n ih =>
      rw [show y (n + 1) = ‚ÅÖT^[M] (y n), x (M * (n + 1))‚ÅÜ by rfl]
      exact bracket_mem_locStable (A_aux n ih)
  have A n : dist (x (M * (n + 1))) (T^[M] (y n)) ‚â§ reduceScale X Œ¥ :=
    A_aux n (B n)
  have C n : y (n + 1) ‚àà locUnstable Œ¥ (T^[M] (y n)) := by
    rw [show y (n + 1) = ‚ÅÖT^[M] (y n), x (M * (n + 1))‚ÅÜ by rfl]
    apply bracket_mem_locUnstable
    rw [dist_comm]
    exact A n
  /- Define a sequence `z_{i, n}` around `x_{M * i}`, as the pullback of `y_{i + n}` from `n` times
  later in the future. We are mostly interested in `z_{0,n}` (which will converge to the desired
  point) but for the estimates we will need to control what happens at an arbitrary `i`. Thanks to
  the contracting properties of `T‚Åª¬π` along unstable manifolds, `n ‚Ü¶ z_{i,n}` has successive jumps
  of size at most `2^{-(n+1)} Œ¥`, and is therefore converging to a limit `p·µ¢` belonging to
  the stable manifold of `y·µ¢` of size `Œ¥`. -/
  let z i n := T.symm^[M * n] (y (i + n))
  have Z i n : z i (n + 1) ‚àà locUnstable (Œª ^ (M * (n + 1)) * Œ¥) (z i n) := by
    convert image_iter_mem_locUnstable h'Œ¥ (C (i + n)) (n := M * (n + 1)) using 2
    rw [mul_add, iterate_add_apply, mul_one, L]
  have Z' i n : z i (n + 1) ‚àà locUnstable (2‚Åª¬π ^ (n + 1) * Œ¥) (z i n) := by
    apply locUnstable_mono _ (Z i n)
    rw [pow_mul]
    gcongr
  let p i := limUnder atTop (z i)
  have Lim i : Tendsto (z i) atTop (ùìù (p i)) := by
    apply tendsto_nhds_limUnder (cauchySeq_tendsto_of_complete ?_)
    apply cauchySeq_of_le_geometric_two (C := Œ¥) (fun n ‚Ü¶ ?_)
    apply (Z' i n).1.trans_eq
    simp only [inv_pow, pow_succ]
    field_simp
  have I n : T^[M * n] (p 0) = p n := by
    have L1 : Tendsto (fun i ‚Ü¶ T^[M * n] (z 0 i)) atTop (ùìù (T^[M * n] (p 0))) := by
      have : ContinuousAt (T^[M * n]) (p 0) := by fun_prop
      exact Tendsto.comp this (Lim 0)
    have L'1 : Tendsto (fun i ‚Ü¶ T^[M * n] (z 0 (n + i))) atTop (ùìù (T^[M * n] (p 0))) := by
      simpa [add_comm] using (tendsto_add_atTop_iff_nat n).2 L1
    have L2 : Tendsto (fun i ‚Ü¶ T^[M * n] (z 0 (n + i))) atTop (ùìù (p n)) := by
      convert Lim n using 2 with i
      simp only [z]
      rw [mul_add, iterate_add_apply, L', zero_add]
    exact tendsto_nhds_unique L'1 L2
  have H i n : z i n ‚àà locUnstable ((1 - 2‚Åª¬π ^ n) * Œ¥) (y i) := by
    induction n with
    | zero => simp [z]
    | succ n ih =>
      have A : (1 - 2‚Åª¬π ^ n) * Œ¥ + 2‚Åª¬π ^ (n + 1) * Œ¥ = (1 - 2‚Åª¬π ^ (n + 1)) * Œ¥ := by ring
      have W := mem_locUnstable_trans ih (Z' i n)
      rw [A] at W
      apply W
      apply le_trans _ h'Œ¥
      apply mul_le_of_le_one_left hŒ¥.le (by simp)
  have P i : p i ‚àà locUnstable Œ¥ (y i) := by
    apply IsClosed.mem_of_tendsto (isClosed_locUnstable h'Œ¥) (Lim i)
      (Eventually.of_forall (fun n ‚Ü¶ ?_))
    apply locUnstable_mono _ (H i n)
    simp [sub_mul, hŒ¥.le]
  /- The point `p‚ÇÄ` will satisfy the conclusion of the lemma. To control the distance between
  `T^n (p‚ÇÄ)` and `x‚Çô`, we write `n = M a + b`. The points `x_{M a}` and `y‚Çê` are on the same
  stable manifold of size `Œ¥`, so their images under `T^b` are `Œ¥`-close. Moreover, the image
  `T^b (x_{M a})` is `Œ¥` close to `x_{M a + b}` by the `Œµ`-pseudoorbit property. It remains
  to see that `T^b y‚Çê` is `2Œ¥`-close to `T^n p‚ÇÄ` to conclude. At time `(M+1) a`, the corresponding
  points are on a common unstable manifold of size `2Œ¥` by construction (as `y_{a+1}` is on the
  `Œ¥`-unstable manifold of `T^M y‚Çê` and `p_{a+1}` is on the `Œ¥`-unstable manifold of `y_{a+1}`.)
  Pulling back by `T^{-(M-b)}`, which contracts distances along unstable manifolds, we get the
  desired bound by `2Œ¥`. -/
  refine ‚ü®p 0, P 0, fun n ‚Ü¶ ?_‚ü©
  obtain ‚ü®a, b, hb, rfl‚ü© : ‚àÉ (a b : ‚Ñï), b < M ‚àß n = M * a + b :=
    ‚ü®n / M, n % M, Nat.mod_lt n (by omega), by rw [Nat.div_add_mod]‚ü©
  have : dist (x (M * a + b)) (T^[M * a + b] (p 0)) ‚â§ dist (x (M * a + b)) (T^[b] (x (M * a)))
      + dist (T^[b] (x (M * a))) (T^[b] (y a)) + dist (T^[b] (y a)) (T^[M * a + b] (p 0)) :=
    dist_triangle4 _ _ _ _
  have : dist (x (M * a + b)) (T^[b] (x (M * a))) ‚â§ Œ¥ := by
    have : dist (x (M * a + b)) (T^[b] (x (M * a))) ‚â§ reduceScale X Œ¥ / 2 := by
      rw [dist_comm]
      exact hŒµ (fun i ‚Ü¶ x (M * a + i)) (fun n ‚Ü¶ hx _) b hb.le
    exact this.trans (by linarith [reduceScale_le_half_self (X := X) (Œµ := Œ¥)])
  have : dist (T^[b] (x (M * a))) (T^[b] (y a)) ‚â§ Œ¥ := by
    apply (image_iter_mem_locStable h'Œ¥ (B a) b).1.trans
    apply mul_le_of_le_one_left hŒ¥.le
    apply pow_le_one‚ÇÄ lambda_pos.le lambda_lt_one.le
  have : dist (T^[b] (y a)) (T^[M * a + b] (p 0)) ‚â§ 2 * Œ¥ := by
    have E1 : T^[b] (y a) = T.symm^[M-b] (T^[M] (y a)) := by
      have : M = M-b + b := by omega
      nth_rw 2 [this]
      rw [iterate_add_apply, L]
    have E2 : T^[M * a + b] (p 0) = T.symm^[M-b] (p (a + 1)) := by
      have : M * (a + 1) = (M - b) + (M * a + b) := by rw [mul_add]; omega
      rw [‚Üê I (a + 1), this, iterate_add_apply _ (M - b), L]
    rw [E1, E2]
    have : p (a + 1) ‚àà locUnstable (Œ¥ + Œ¥) (T^[M] (y a)) :=
      mem_locUnstable_trans (C a) (P (a + 1)) (by linarith)
    apply (image_iter_mem_locUnstable (by linarith) this (M - b)).1.trans
    apply (mul_le_of_le_one_left (by linarith) _).trans_eq (by ring)
    apply pow_le_one‚ÇÄ lambda_pos.le lambda_lt_one.le
  linarith

/-- Let `Œ¥ > 0`. Let `Œµ` be small enough compared to `Œ¥`. Then any `Œµ`-pseudo-orbit
can be `4Œ¥`-shadowed by a genuine orbit.

We give the conditions on `Œµ` in explicit form, to make it possible to check them uniformly
over families of maps. First, we fix `M` large enough so that `2 * Œª ^ M * Œ¥ ‚â§ reduceScale X Œ¥`.
Then, `Œµ` should be small enough that an `Œµ`-pseudo-orbit does not deviate from a genuine orbit
by more than `reduceScale X Œ¥ / 2` until time `M`.
-/
lemma shadowing_precise
    {Œµ Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥) (h''Œ¥ : Œ¥ ‚â§ Œ¥‚ÇÅ / 4) (x : ‚Ñ§ ‚Üí X)
    (hx : ‚àÄ n, dist (T (x n)) (x (n + 1)) ‚â§ Œµ) {M : ‚Ñï} (hM : 2 * Œª ^ M * Œ¥ ‚â§ reduceScale X Œ¥)
    (hŒµ : ‚àÄ (u : ‚Ñï ‚Üí X), (‚àÄ n, dist (T (u n)) (u (n + 1)) ‚â§ Œµ) ‚Üí
      ‚àÄ i ‚â§ M, dist (T^[i] (u 0)) (u i) ‚â§ reduceScale X Œ¥ / 2) :
    ‚àÉ p, ‚àÄ n, dist (x n) ((T ^ n) p) ‚â§ 4 * Œ¥ := by
  have h'Œ¥ : Œ¥ ‚â§ Œ¥‚ÇÄ / 2 := by linarith [deltaOne_le_deltaZero (X := X)]
  have A n : ‚àÉ p, (‚àÄ (i : ‚Ñï), dist (x i) (T^[i] p) ‚â§ 4 * Œ¥)
      ‚àß (‚àÄ (i : ‚Ñï), i ‚â§ n ‚Üí dist (x (-i)) (T.symm^[i] p) ‚â§ 4 * Œ¥) := by
    rcases future_shadowing_precise hŒ¥ h'Œ¥ (Œµ := Œµ) (fun i ‚Ü¶ x (i - n : ‚Ñ§))
      (fun i ‚Ü¶ by convert hx (i - n) using 3; omega) hM hŒµ with ‚ü®q, -, hq‚ü©
    refine ‚ü®T^[n] q, fun i ‚Ü¶ ?_, fun i hi ‚Ü¶ ?_‚ü©
    ¬∑ rw [‚Üê iterate_add_apply]
      convert hq (i + n)
      omega
    ¬∑ have L : Function.LeftInverse T.symm^[i] T^[i] := (Equiv.leftInverse_symm T).iterate _
      have : n = i + (n - i) := by omega
      rw [this, iterate_add_apply, L]
      convert hq (n - i) using 3
      omega





#exit


lemma shadowing {Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥) : ‚àÉ Œµ > 0, ‚àÄ (x : ‚Ñ§ ‚Üí X),
    (‚àÄ n, dist (T (x n)) (x (n + 1)) ‚â§ Œµ) ‚Üí ‚àÉ p, ‚àÄ n, dist (x n) ((T ^ n) p) ‚â§ 4 * Œ¥ := by
  let Œ¥' := min Œ¥ (Œ¥‚ÇÄ / 2)
  have : 0 < Œ¥' := by
    simp [Œ¥', hŒ¥]


end SmaleSpace
